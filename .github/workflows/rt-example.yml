name: RT Build/Deploy

on:
  push:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [19.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - uses: jfrog/setup-jfrog-cli@v3
        env:
          # JFrog platform url (for example: https://acme.jfrog.io)
          JF_URL: ${{ secrets.JF_URL }}
          # JFrog Platform access token
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
      - name: 'Create .npmrc'
        shell: bash
        run: |
          echo "registry=${{ secrets.JF_URL }}/artifactory/api/npm/${{ vars.JF_REPO_NAME }}/" > .npmrc
          echo "${{ secrets.JF_URL }}/artifactory/api/npm/${{ vars.JF_REPO_NAME }}/"
          echo "soleng.jfrog.io/artifactory/api/npm/ad-npm-remote/:_authToken = ${{ secrets.JF_ACCESS_TOKEN }}" >> .npmrc
          echo "always-auth = true" >> .npmrc
          echo "file is..."
          cat .npmrc
      - run: npm i --legacy-peer-deps
      - name: build
        run: npm run build --if-present
        env:
          CI: ""
      - name: Publish build
        run: |
          # Collect and store environment variables in the build-info
          jf rt build-collect-env ${{ github.repository }} ${{ github.run_number }}

          # Collect and store VCS details in the build-info
          jf rt build-add-git ${{ github.repository }} ${{ github.run_number }}

          # Publish the build-info to Artifactory
          jf rt build-publish ${{ github.repository }} ${{ github.run_number }}
